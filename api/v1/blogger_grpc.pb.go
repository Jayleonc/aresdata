// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: v1/blogger.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BloggerService_GetBlogger_FullMethodName   = "/BloggerService/GetBlogger"
	BloggerService_ListBloggers_FullMethodName = "/BloggerService/ListBloggers"
)

// BloggerServiceClient is the client API for BloggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BloggerService 提供视频博主维度数据的查询服务
type BloggerServiceClient interface {
	// 查询单个视频博主信息
	GetBlogger(ctx context.Context, in *BloggerQueryRequest, opts ...grpc.CallOption) (*BloggerQueryResponse, error)
	// 分页查询视频博主信息
	ListBloggers(ctx context.Context, in *ListBloggersRequest, opts ...grpc.CallOption) (*ListBloggersResponse, error)
}

type bloggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBloggerServiceClient(cc grpc.ClientConnInterface) BloggerServiceClient {
	return &bloggerServiceClient{cc}
}

func (c *bloggerServiceClient) GetBlogger(ctx context.Context, in *BloggerQueryRequest, opts ...grpc.CallOption) (*BloggerQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloggerQueryResponse)
	err := c.cc.Invoke(ctx, BloggerService_GetBlogger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggerServiceClient) ListBloggers(ctx context.Context, in *ListBloggersRequest, opts ...grpc.CallOption) (*ListBloggersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBloggersResponse)
	err := c.cc.Invoke(ctx, BloggerService_ListBloggers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloggerServiceServer is the server API for BloggerService service.
// All implementations must embed UnimplementedBloggerServiceServer
// for forward compatibility.
//
// BloggerService 提供视频博主维度数据的查询服务
type BloggerServiceServer interface {
	// 查询单个视频博主信息
	GetBlogger(context.Context, *BloggerQueryRequest) (*BloggerQueryResponse, error)
	// 分页查询视频博主信息
	ListBloggers(context.Context, *ListBloggersRequest) (*ListBloggersResponse, error)
	mustEmbedUnimplementedBloggerServiceServer()
}

// UnimplementedBloggerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBloggerServiceServer struct{}

func (UnimplementedBloggerServiceServer) GetBlogger(context.Context, *BloggerQueryRequest) (*BloggerQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogger not implemented")
}
func (UnimplementedBloggerServiceServer) ListBloggers(context.Context, *ListBloggersRequest) (*ListBloggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBloggers not implemented")
}
func (UnimplementedBloggerServiceServer) mustEmbedUnimplementedBloggerServiceServer() {}
func (UnimplementedBloggerServiceServer) testEmbeddedByValue()                        {}

// UnsafeBloggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloggerServiceServer will
// result in compilation errors.
type UnsafeBloggerServiceServer interface {
	mustEmbedUnimplementedBloggerServiceServer()
}

func RegisterBloggerServiceServer(s grpc.ServiceRegistrar, srv BloggerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBloggerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BloggerService_ServiceDesc, srv)
}

func _BloggerService_GetBlogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BloggerQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggerServiceServer).GetBlogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggerService_GetBlogger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggerServiceServer).GetBlogger(ctx, req.(*BloggerQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggerService_ListBloggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBloggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggerServiceServer).ListBloggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggerService_ListBloggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggerServiceServer).ListBloggers(ctx, req.(*ListBloggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BloggerService_ServiceDesc is the grpc.ServiceDesc for BloggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BloggerService",
	HandlerType: (*BloggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlogger",
			Handler:    _BloggerService_GetBlogger_Handler,
		},
		{
			MethodName: "ListBloggers",
			Handler:    _BloggerService_ListBloggers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/blogger.proto",
}
