// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.20.3
// source: v1/fetcher.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFetcherFetchAndStore = "/Fetcher/FetchAndStore"
const OperationFetcherHello = "/Fetcher/Hello"

type FetcherHTTPServer interface {
	// FetchAndStore 采集并存储
	FetchAndStore(context.Context, *FetchAndStoreRequest) (*FetchAndStoreReply, error)
	// Hello Hello GET 方法
	Hello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterFetcherHTTPServer(s *http.Server, srv FetcherHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/fetch", _Fetcher_FetchAndStore0_HTTP_Handler(srv))
	r.GET("/v1/hello", _Fetcher_Hello0_HTTP_Handler(srv))
}

func _Fetcher_FetchAndStore0_HTTP_Handler(srv FetcherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FetchAndStoreRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFetcherFetchAndStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FetchAndStore(ctx, req.(*FetchAndStoreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FetchAndStoreReply)
		return ctx.Result(200, reply)
	}
}

func _Fetcher_Hello0_HTTP_Handler(srv FetcherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFetcherHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

type FetcherHTTPClient interface {
	FetchAndStore(ctx context.Context, req *FetchAndStoreRequest, opts ...http.CallOption) (rsp *FetchAndStoreReply, err error)
	Hello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type FetcherHTTPClientImpl struct {
	cc *http.Client
}

func NewFetcherHTTPClient(client *http.Client) FetcherHTTPClient {
	return &FetcherHTTPClientImpl{client}
}

func (c *FetcherHTTPClientImpl) FetchAndStore(ctx context.Context, in *FetchAndStoreRequest, opts ...http.CallOption) (*FetchAndStoreReply, error) {
	var out FetchAndStoreReply
	pattern := "/v1/fetch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFetcherFetchAndStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FetcherHTTPClientImpl) Hello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/v1/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFetcherHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
