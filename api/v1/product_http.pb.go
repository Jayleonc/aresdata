// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.20.3
// source: v1/product.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductServiceGetProduct = "/ProductService/GetProduct"
const OperationProductServiceListProducts = "/ProductService/ListProducts"

type ProductServiceHTTPServer interface {
	// GetProduct 查询单个商品信息
	GetProduct(context.Context, *ProductQueryRequest) (*ProductQueryResponse, error)
	// ListProducts 分页查询商品信息
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
}

func RegisterProductServiceHTTPServer(s *http.Server, srv ProductServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/products/list", _ProductService_ListProducts0_HTTP_Handler(srv))
	r.POST("/v1/products/detail", _ProductService_GetProduct0_HTTP_Handler(srv))
}

func _ProductService_ListProducts0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceListProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProducts(ctx, req.(*ListProductsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProductsResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductService_GetProduct0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductQueryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceGetProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProduct(ctx, req.(*ProductQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductQueryResponse)
		return ctx.Result(200, reply)
	}
}

type ProductServiceHTTPClient interface {
	GetProduct(ctx context.Context, req *ProductQueryRequest, opts ...http.CallOption) (rsp *ProductQueryResponse, err error)
	ListProducts(ctx context.Context, req *ListProductsRequest, opts ...http.CallOption) (rsp *ListProductsResponse, err error)
}

type ProductServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProductServiceHTTPClient(client *http.Client) ProductServiceHTTPClient {
	return &ProductServiceHTTPClientImpl{client}
}

func (c *ProductServiceHTTPClientImpl) GetProduct(ctx context.Context, in *ProductQueryRequest, opts ...http.CallOption) (*ProductQueryResponse, error) {
	var out ProductQueryResponse
	pattern := "/v1/products/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductServiceGetProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductServiceHTTPClientImpl) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...http.CallOption) (*ListProductsResponse, error) {
	var out ListProductsResponse
	pattern := "/v1/products/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductServiceListProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
