// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: v1/video_rank.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoRank_GetVideoRank_FullMethodName      = "/VideoRank/GetVideoRank"
	VideoRank_BatchGetVideoRank_FullMethodName = "/VideoRank/BatchGetVideoRank"
)

// VideoRankClient is the client API for VideoRank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VideoRank 提供榜单视频排名查询服务
type VideoRankClient interface {
	// 查询单个视频榜单信息
	GetVideoRank(ctx context.Context, in *VideoRankQueryRequest, opts ...grpc.CallOption) (*VideoRankQueryResponse, error)
	// 批量查询视频榜单信息
	BatchGetVideoRank(ctx context.Context, in *BatchVideoRankQueryRequest, opts ...grpc.CallOption) (*BatchVideoRankQueryResponse, error)
}

type videoRankClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoRankClient(cc grpc.ClientConnInterface) VideoRankClient {
	return &videoRankClient{cc}
}

func (c *videoRankClient) GetVideoRank(ctx context.Context, in *VideoRankQueryRequest, opts ...grpc.CallOption) (*VideoRankQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoRankQueryResponse)
	err := c.cc.Invoke(ctx, VideoRank_GetVideoRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRankClient) BatchGetVideoRank(ctx context.Context, in *BatchVideoRankQueryRequest, opts ...grpc.CallOption) (*BatchVideoRankQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchVideoRankQueryResponse)
	err := c.cc.Invoke(ctx, VideoRank_BatchGetVideoRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoRankServer is the server API for VideoRank service.
// All implementations must embed UnimplementedVideoRankServer
// for forward compatibility.
//
// VideoRank 提供榜单视频排名查询服务
type VideoRankServer interface {
	// 查询单个视频榜单信息
	GetVideoRank(context.Context, *VideoRankQueryRequest) (*VideoRankQueryResponse, error)
	// 批量查询视频榜单信息
	BatchGetVideoRank(context.Context, *BatchVideoRankQueryRequest) (*BatchVideoRankQueryResponse, error)
	mustEmbedUnimplementedVideoRankServer()
}

// UnimplementedVideoRankServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoRankServer struct{}

func (UnimplementedVideoRankServer) GetVideoRank(context.Context, *VideoRankQueryRequest) (*VideoRankQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoRank not implemented")
}
func (UnimplementedVideoRankServer) BatchGetVideoRank(context.Context, *BatchVideoRankQueryRequest) (*BatchVideoRankQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetVideoRank not implemented")
}
func (UnimplementedVideoRankServer) mustEmbedUnimplementedVideoRankServer() {}
func (UnimplementedVideoRankServer) testEmbeddedByValue()                   {}

// UnsafeVideoRankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoRankServer will
// result in compilation errors.
type UnsafeVideoRankServer interface {
	mustEmbedUnimplementedVideoRankServer()
}

func RegisterVideoRankServer(s grpc.ServiceRegistrar, srv VideoRankServer) {
	// If the following call pancis, it indicates UnimplementedVideoRankServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoRank_ServiceDesc, srv)
}

func _VideoRank_GetVideoRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRankQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRankServer).GetVideoRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRank_GetVideoRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRankServer).GetVideoRank(ctx, req.(*VideoRankQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRank_BatchGetVideoRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchVideoRankQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRankServer).BatchGetVideoRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRank_BatchGetVideoRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRankServer).BatchGetVideoRank(ctx, req.(*BatchVideoRankQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoRank_ServiceDesc is the grpc.ServiceDesc for VideoRank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoRank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoRank",
	HandlerType: (*VideoRankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoRank",
			Handler:    _VideoRank_GetVideoRank_Handler,
		},
		{
			MethodName: "BatchGetVideoRank",
			Handler:    _VideoRank_BatchGetVideoRank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/video_rank.proto",
}
