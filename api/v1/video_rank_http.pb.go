// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.20.3
// source: v1/video_rank.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoRankBatchGetVideoRank = "/VideoRank/BatchGetVideoRank"
const OperationVideoRankGetVideoRank = "/VideoRank/GetVideoRank"

type VideoRankHTTPServer interface {
	// BatchGetVideoRank 批量查询视频榜单信息
	BatchGetVideoRank(context.Context, *BatchVideoRankQueryRequest) (*BatchVideoRankQueryResponse, error)
	// GetVideoRank 查询单个视频榜单信息
	GetVideoRank(context.Context, *VideoRankQueryRequest) (*VideoRankQueryResponse, error)
}

func RegisterVideoRankHTTPServer(s *http.Server, srv VideoRankHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/video_rank", _VideoRank_GetVideoRank0_HTTP_Handler(srv))
	r.GET("/v1/video_rank/List", _VideoRank_BatchGetVideoRank0_HTTP_Handler(srv))
}

func _VideoRank_GetVideoRank0_HTTP_Handler(srv VideoRankHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoRankQueryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRankGetVideoRank)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoRank(ctx, req.(*VideoRankQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoRankQueryResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoRank_BatchGetVideoRank0_HTTP_Handler(srv VideoRankHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchVideoRankQueryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRankBatchGetVideoRank)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchGetVideoRank(ctx, req.(*BatchVideoRankQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchVideoRankQueryResponse)
		return ctx.Result(200, reply)
	}
}

type VideoRankHTTPClient interface {
	BatchGetVideoRank(ctx context.Context, req *BatchVideoRankQueryRequest, opts ...http.CallOption) (rsp *BatchVideoRankQueryResponse, err error)
	GetVideoRank(ctx context.Context, req *VideoRankQueryRequest, opts ...http.CallOption) (rsp *VideoRankQueryResponse, err error)
}

type VideoRankHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoRankHTTPClient(client *http.Client) VideoRankHTTPClient {
	return &VideoRankHTTPClientImpl{client}
}

func (c *VideoRankHTTPClientImpl) BatchGetVideoRank(ctx context.Context, in *BatchVideoRankQueryRequest, opts ...http.CallOption) (*BatchVideoRankQueryResponse, error) {
	var out BatchVideoRankQueryResponse
	pattern := "/v1/video_rank/List"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoRankBatchGetVideoRank))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoRankHTTPClientImpl) GetVideoRank(ctx context.Context, in *VideoRankQueryRequest, opts ...http.CallOption) (*VideoRankQueryResponse, error) {
	var out VideoRankQueryResponse
	pattern := "/v1/video_rank"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoRankGetVideoRank))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
