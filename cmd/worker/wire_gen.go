// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Jayleonc/aresdata/internal/conf"
	"github.com/Jayleonc/aresdata/internal/data"
	"github.com/Jayleonc/aresdata/internal/fetcher"
	"github.com/Jayleonc/aresdata/internal/task"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

func wireApp(bootstrap *conf.Bootstrap, confData *conf.Data, logger log.Logger) (*App, func(), error) {
	cmdable := data.NewRedisClient(confData)
	dataData, cleanup, err := data.NewData(confData, cmdable, logger)
	if err != nil {
		return nil, nil, err
	}
	sourceDataRepo := data.NewSourceDataRepo(dataData, logger)
	v := data.NewDataSourcesProvider(confData)
	fetcherManager, err := fetcher.NewFetcherManager(v, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	fetcherUsecase := fetcher.NewHttpUsecase(sourceDataRepo, fetcherManager, logger)
	fetchVideoRankTask := task.NewFetchVideoRankTask(fetcherUsecase, logger)
	videoRepo := data.NewVideoRepo(dataData)
	fetchVideoTrendTask := task.NewFetchVideoTrendTask(fetcherUsecase, videoRepo, logger)
	headlessUsecase := fetcher.NewHeadlessUsecase(sourceDataRepo, fetcherManager, logger)
	fetchVideoDetailsHeadlessTask := task.NewFetchVideoDetailsHeadlessTask(logger, videoRepo, headlessUsecase)
	remedyVideoDetailsHeadlessTask := task.NewRemedyVideoDetailsHeadlessTask(logger, videoRepo, headlessUsecase)
	v2 := task.NewTaskSet(fetchVideoRankTask, fetchVideoTrendTask, fetchVideoDetailsHeadlessTask, remedyVideoDetailsHeadlessTask)
	app := newApp(logger, v2)
	return app, func() {
		cleanup()
	}, nil
}
