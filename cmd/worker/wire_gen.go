// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"aresdata/internal/biz"
	"aresdata/internal/conf"
	"aresdata/internal/data"
	"aresdata/internal/etl"
	"aresdata/internal/fetcher"
	"aresdata/internal/task"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

func wireApp(bootstrap *conf.Bootstrap, confData *conf.Data, logger log.Logger) (*App, func(), error) {
	cmdable := data.NewRedisClient(confData)
	dataData, cleanup, err := data.NewData(confData, cmdable, logger)
	if err != nil {
		return nil, nil, err
	}
	sourceDataRepo := data.NewSourceDataRepo(dataData, logger)
	feiguaFetcher := fetcher.NewFeiguaFetcher(confData, logger)
	fetcherUsecase := biz.NewFetcherUsecase(sourceDataRepo, feiguaFetcher, logger)
	fetchVideoRankTask := task.NewFetchVideoRankTask(fetcherUsecase, logger)
	videoRankRepo := data.NewVideoRankRepo(dataData)
	videoRepo := data.NewVideoRepo(dataData)
	productRepo := data.NewProductRepo(dataData)
	bloggerRepo := data.NewBloggerRepo(dataData)
	videoRankProcessor := etl.NewVideoRankProcessor(videoRankRepo, sourceDataRepo, videoRepo, productRepo, bloggerRepo, logger)
	videoTrendRepo := data.NewVideoTrendRepo(dataData)
	videoTrendProcessor := etl.NewVideoTrendProcessor(sourceDataRepo, videoRepo, videoTrendRepo, logger)
	videoSummaryProcessor := etl.NewVideoSummaryProcessor(sourceDataRepo, videoRepo, logger)
	etlUsecase := etl.NewETLUsecase(sourceDataRepo, videoRankProcessor, videoTrendProcessor, videoSummaryProcessor)
	processVideoRankTask := task.NewProcessVideoRankTask(etlUsecase)
	videoUsecase := biz.NewVideoUsecase(videoRepo, sourceDataRepo)
	fetchVideoTrendTask := task.NewFetchVideoTrendTask(fetcherUsecase, videoUsecase, logger)
	processVideoTrendTask := task.NewProcessVideoTrendTask(etlUsecase)
	fetchVideoSummaryTask := task.NewFetchVideoSummaryTask(fetcherUsecase, videoRepo, logger)
	processVideoSummaryTask := task.NewProcessVideoSummaryTask(etlUsecase)
	headlessFetcher := fetcher.NewHeadlessFetcher(confData, logger)
	headlessUsecase := biz.NewHeadlessUsecase(sourceDataRepo, headlessFetcher, confData, logger)
	fetchVideoDetailsHeadlessTask := task.NewFetchVideoDetailsHeadlessTask(logger, videoUsecase, headlessUsecase, confData)
	remedyVideoDetailsHeadlessTask := task.NewRemedyVideoDetailsHeadlessTask(logger, videoUsecase, headlessUsecase, confData)
	v := task.NewTaskSet(fetchVideoRankTask, processVideoRankTask, fetchVideoTrendTask, processVideoTrendTask, fetchVideoSummaryTask, processVideoSummaryTask, fetchVideoDetailsHeadlessTask, remedyVideoDetailsHeadlessTask)
	app := newApp(logger, v)
	return app, func() {
		cleanup()
	}, nil
}
