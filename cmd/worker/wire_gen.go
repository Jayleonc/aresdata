// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Jayleonc/aresdata/internal/conf"
	"github.com/Jayleonc/aresdata/internal/data"
	"github.com/Jayleonc/aresdata/internal/etl"
	"github.com/Jayleonc/aresdata/internal/fetcher"
	"github.com/Jayleonc/aresdata/internal/task"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// 依赖注入说明：task 层依赖具体 usecase（*fetcher.HttpUsecase, *fetcher.HeadlessUsecase），FetcherManager 仅用于 fetcher 初始化。
func wireApp(bootstrap *conf.Bootstrap, confData *conf.Data, logger log.Logger) (*App, func(), error) {
	cmdable := data.NewRedisClient(confData)
	dataData, cleanup, err := data.NewData(confData, cmdable, logger)
	if err != nil {
		return nil, nil, err
	}
	sourceDataRepo := data.NewSourceDataRepo(dataData, logger)
	v := fetcher.provideDataSources(confData)
	fetcherManager, err := fetcher.NewFetcherManager(v, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	httpUsecase := fetcher.NewHttpUsecase(sourceDataRepo, fetcherManager, logger)
	fetchVideoRankTask := task.NewFetchVideoRankTask(httpUsecase, logger)
	videoRepo := data.NewVideoRepo(dataData)
	fetchVideoTrendTask := task.NewFetchVideoTrendTask(httpUsecase, videoRepo, logger)
	headlessUsecase := fetcher.NewHeadlessUsecase(fetcherManager, videoRepo, sourceDataRepo, logger)
	fetchVideoDetailsHeadlessTask := task.NewFetchVideoDetailsHeadlessTask(logger, fetcherManager, headlessUsecase)
	videoRankRepo := data.NewVideoRankRepo(dataData)
	productRepo := data.NewProductRepo(dataData)
	bloggerRepo := data.NewBloggerRepo(dataData)
	videoRankProcessor := etl.NewVideoRankProcessor(videoRankRepo, sourceDataRepo, videoRepo, productRepo, bloggerRepo, logger)
	videoTrendRepo := data.NewVideoTrendRepo(dataData)
	videoDetailProcessor := etl.NewVideoDetailProcessor(logger, sourceDataRepo, videoRepo, bloggerRepo, videoTrendRepo)
	etlUsecase := etl.NewETLUsecase(logger, sourceDataRepo, videoRankProcessor, videoDetailProcessor)
	processVideoRankTask := task.NewProcessVideoRankTask(etlUsecase)
	processVideoDetailHeadlessTask := task.NewProcessVideoDetailHeadlessTask(etlUsecase, logger)
	remedyVideoDetailsHeadlessTask := task.NewRemedyVideoDetailsHeadlessTask(logger, videoRepo, fetcherManager, headlessUsecase)
	v2 := task.NewTaskSet(fetchVideoRankTask, fetchVideoTrendTask, fetchVideoDetailsHeadlessTask, processVideoRankTask, processVideoDetailHeadlessTask, remedyVideoDetailsHeadlessTask)
	app := newApp(logger, v2)
	return app, func() {
		cleanup()
	}, nil
}
